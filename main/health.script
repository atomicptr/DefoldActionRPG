---@class Health
---@field health integer
---@field max_health integer
---@field iframe integer
---@field iframe_duration integer
---@field show_hit_effect boolean

go.property("max_health", 1)
go.property("iframe_duration", 30)
go.property("show_hit_effect", true)

---@param self Health
function init(self)
    self.health = self.max_health
    self.iframe = 0

    msg.post(".", "updated_health", { value = self.health })
end

---@param self Health
---@param message_id userdata
---@param message any
---@param sender userdata
function on_message(self, message_id, message, sender)
    local iframe_active = self.iframe > 0

    if not iframe_active and message_id == hash("take_damage") then
        local damage = 1

        if message.damage then
            damage = message.damage
        end

        self.health = self.health - damage
        self.iframe = self.iframe_duration

        if self.show_hit_effect then
            spawn_hit_effect()
        end

        msg.post(".", "updated_health", { value = self.health })
        start_iframe_animation()
    end

    if message_id == hash("start_iframe") then
        self.iframe = message.iframe_duration or self.iframe_duration
        start_iframe_animation()
    end
end

---@param self Health
---@param dt float
function update(self, dt)
    local iframe_active = self.iframe > 0

    if iframe_active then
        self.iframe = self.iframe - 1
    end

    if self.iframe <= 0 then
        stop_iframe_animation()
    end

    if self.health <= 0 then
        msg.post(".", "on_death")
    end
end

function spawn_hit_effect()
    factory.create("/hit_effect_spawner#factory", go.get_position())
end

function start_iframe_animation()
    go.animate("#sprite", "tint.w", go.PLAYBACK_ONCE_FORWARD, 2, go.EASING_LINEAR, 0.1)
end

function stop_iframe_animation()
    go.animate("#sprite", "tint.w", go.PLAYBACK_ONCE_FORWARD, 1, go.EASING_LINEAR, 0.1)
end
