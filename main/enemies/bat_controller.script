local xvmath = require("modules.xvmath")

local KNOCKBACK_STRENGTH = 120
local FRICTION = 200
local ACCELERATION = 300
local MAX_SPEED = 50

local STATE_IDLE = 0
local STATE_WANDER = 1
local STATE_CHASE = 2

---@class BatController
---@field velocity vector3
---@field state integer

---@param self BatController
function init(self)
    self.velocity = xvmath.zero()
    self.state = STATE_IDLE
end

---@param self BatController
---@param message_id userdata
---@param message any
---@param sender userdata
function on_message(self, message_id, message, sender)
    local is_hitbox = message.own_group == hash("hitable")
    local is_hurtbox = message.own_group == hash("enemy_hit")

    if is_hitbox and message_id == hash("trigger_response") then
        local other_pos = go.get_position(message.other_id)

        local direction = vmath.normalize(go.get_position() - other_pos)
        direction.z = 0

        ---@cast direction vector3
        self.velocity = direction * KNOCKBACK_STRENGTH
    end

    if is_hurtbox and message_id == hash("collision_response") then
        msg.post(message.other_id, "take_damage")
    end

    if message_id == hash("collision_response") and message.own_group == hash("soft_collisions") then
        local pos = go.get_position()
        local direction = xvmath.direction_to(message.other_position, pos)
        self.velocity = self.velocity + direction * 10
    end

    if message_id == hash("on_death") then
        spawn_death_effect()
        go.delete()
    end

    if message_id == hash("found_player") then
        self.state = STATE_CHASE
    end

    if message_id == hash("lost_player") then
        self.state = STATE_IDLE
    end
end

---@param self BatController
---@param dt float
function fixed_update(self, dt)
    if self.state == STATE_IDLE then
        idle_state(self, dt)
    elseif self.state == STATE_CHASE then
        chase_state(self, dt)
    elseif self.state == STATE_WANDER then
        wander_state(self, dt)
    end

    self.velocity = xvmath.move_toward(self.velocity, xvmath.zero(), FRICTION * dt)
    move(self.velocity * dt)
end

---@param self BatController
---@param dt float
function idle_state(self, dt)
    self.velocity = xvmath.move_toward(self.velocity, xvmath.zero(), FRICTION * dt)
end

---@param self BatController
---@param dt float
function chase_state(self, dt)
    -- after the player has died, the bat will not do anything anymore
    if not go.exists("/player") then
        self.state = STATE_IDLE
        return
    end
    local player_position = go.get_position("/player")
    local direction = vmath.normalize(player_position - go.get_position())
    ---@cast direction vector3
    self.velocity = xvmath.move_toward(self.velocity, direction * MAX_SPEED, ACCELERATION * dt)
end

---@param self BatController
---@param dt float
function wander_state(self, dt)

end

---@param movement vector3
function move(movement)
    local position = go.get_position()
    position = position + movement
    go.set_position(position)
end

function spawn_death_effect()
    factory.create("/enemy_death_effect_spawner#factory", go.get_position())
end
