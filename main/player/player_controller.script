local xvmath = require("modules.xvmath")
local AnimationTree = require("modules.animation_tree")

local ACCELERATION = 500
local MAX_SPEED = 80
local ROLL_SPEED = 120
local FRICTION = 500

local STATE_MOVE = 0
local STATE_ATTACK = 1
local STATE_ROLL = 2

---@class PlayerController
---@field velocity vector3
---@field input_vector vector3|vector4
---@field look_direction vector3
---@field anim_tree AnimationTree
---@field state integer
---@field animation_playing bool
---@field sword_damage integer

go.property("sword_damage", 1)

---@param self PlayerController
function init(self)
    msg.post(".", "acquire_input_focus")
    self.velocity = xvmath.zero()
    self.input_vector = xvmath.zero()
    self.look_direction = xvmath.up()
    self.state = STATE_MOVE
    self.animation_playing = false

    self.anim_tree = AnimationTree.new()
    self.anim_tree:blendspace("idle", {
        { animation = "idle_up",    value = xvmath.up() },
        { animation = "idle_down",  value = xvmath.down() },
        { animation = "idle_left",  value = xvmath.left() },
        { animation = "idle_right", value = xvmath.right() },
    })
    self.anim_tree:blendspace("walk", {
        { animation = "walk_up",    value = xvmath.up() },
        { animation = "walk_down",  value = xvmath.down() },
        { animation = "walk_left",  value = xvmath.left() },
        { animation = "walk_right", value = xvmath.right() },
    })
    self.anim_tree:blendspace("attack", {
        { animation = "attack_up",    value = xvmath.up() },
        { animation = "attack_down",  value = xvmath.down() },
        { animation = "attack_left",  value = xvmath.left() },
        { animation = "attack_right", value = xvmath.right() },
    })
    self.anim_tree:blendspace("roll", {
        { animation = "roll_up",    value = xvmath.up() },
        { animation = "roll_down",  value = xvmath.down() },
        { animation = "roll_left",  value = xvmath.left() },
        { animation = "roll_right", value = xvmath.right() },
    })
    self.anim_tree:play("idle")
end

---@param self PlayerController
---@param action_id userdata
---@param action table
function on_input(self, action_id, action)
    if not self.state == STATE_MOVE then
        return
    end

    if action.pressed and action_id == hash("move_up") then
        self.input_vector.y = 1
        self.look_direction = xvmath.up()
    elseif action.pressed and action_id == hash("move_down") then
        self.input_vector.y = -1
        self.look_direction = xvmath.down()
    end

    if action.pressed and action_id == hash("move_left") then
        self.input_vector.x = -1
        self.look_direction = xvmath.left()
    elseif action.pressed and action_id == hash("move_right") then
        self.input_vector.x = 1
        self.look_direction = xvmath.right()
    end

    if action.pressed and not self.animation_playing and action_id == hash("attack") then
        self.state = STATE_ATTACK
    end

    if action.pressed and not self.animation_playing and action_id == hash("roll") then
        self.state = STATE_ROLL
    end

    if action.released and (action_id == hash("move_up") or action_id == hash("move_down")) then
        self.input_vector.y = 0
    elseif action.released and (action_id == hash("move_left") or action_id == hash("move_right")) then
        self.input_vector.x = 0
    end

    if self.input_vector ~= xvmath.zero() then
        self.input_vector = vmath.normalize(self.input_vector)
    end
end

---@param self PlayerController
---@param dt float
function update(self, dt)
    if self.state == STATE_MOVE then
        move_state(self, dt)
    elseif self.state == STATE_ATTACK then
        attack_state(self, dt)
    elseif self.state == STATE_ROLL then
        roll_state(self, dt)
    end
end

---@param self PlayerController
---@param dt float
function move_state(self, dt)
    self.anim_tree:update(self.input_vector, on_animation_changed)

    if self.input_vector == xvmath.zero() then
        --reset_animation(self)
        self.velocity = xvmath.move_toward(self.velocity, xvmath.zero(), FRICTION * dt)
        self.anim_tree:play("idle")
    else
        self.velocity = xvmath.move_toward(self.velocity, self.input_vector * MAX_SPEED, ACCELERATION * dt)
        self.anim_tree:play("walk")
    end

    move(self.velocity * dt)
end

---@param movement vector3
function move(movement)
    local position = go.get_position()
    position = position + movement
    go.set_position(position)
end

---@param self PlayerController
---@param dt float
function attack_state(self, dt)
    if self.animation_playing then
        return
    end

    self.animation_playing = true
    self.velocity = xvmath.zero()

    self.anim_tree:play("attack")

    process_sword_hit(self.look_direction)

    -- we misuse our animation tree a bit here, by changing the state and calling update the animation
    -- will change to whatever attack animation fits the current input vector and therefore we get the
    -- correct direction
    self.anim_tree:update(self.input_vector, function(name)
        sprite.play_flipbook("#sprite", hash(name), function(self, message_id)
            if message_id ~= hash("animation_done") then
                return
            end

            -- we are no longer animation so we dont need the guard anymore
            self.animation_playing = false

            self.anim_tree:play("idle")
            self.state = STATE_MOVE
        end)
    end)
end

---@param self PlayerController
---@param dt float
function roll_state(self, dt)
    move(self.velocity * dt)

    if self.animation_playing then
        return
    end

    self.animation_playing = true
    self.velocity = self.look_direction * ROLL_SPEED

    self.anim_tree:play("roll")

    -- see attack state at what type of hack we do here
    self.anim_tree:update(self.input_vector, function(name)
        sprite.play_flipbook("#sprite", hash(name), function(self, message_id)
            if message_id ~= hash("animation_done") then
                return
            end

            self.animation_playing = false
            self.velocity = self.velocity * 0.8

            self.anim_tree:play("idle")
            self.state = STATE_MOVE
        end)
    end)
end

---@param animation string
function on_animation_changed(animation)
    sprite.play_flipbook("#sprite", hash(animation))
end

---@param direction vector3
function process_sword_hit(direction)
    local offset = 20

    -- top is a bit further away so we dont need 20
    if direction == xvmath.up() then
        offset = 10
    end

    local sword_hit_position = go.get_position() + (direction * offset)
    local id = factory.create("#sword_hit_factory", sword_hit_position)

    if direction == xvmath.left() or direction == xvmath.right() then
        go.set_rotation(vmath.quat_rotation_z(math.rad(90)), id)
    end
end
